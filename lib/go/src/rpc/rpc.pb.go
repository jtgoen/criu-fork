// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rpc.proto

/*
Package rpc is a generated protocol buffer package.

It is generated from these files:
	rpc.proto

It has these top-level messages:
	CriuPageServerInfo
	CriuVethPair
	ExtMountMap
	JoinNamespace
	InheritFd
	CgroupRoot
	UnixSk
	CriuOpts
	CriuDumpResp
	CriuRestoreResp
	CriuNotify
	CriuFeatures
	CriuReq
	CriuResp
	CriuVersion
*/
package rpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CriuCgMode int32

const (
	CriuCgMode_IGNORE  CriuCgMode = 0
	CriuCgMode_CG_NONE CriuCgMode = 1
	CriuCgMode_PROPS   CriuCgMode = 2
	CriuCgMode_SOFT    CriuCgMode = 3
	CriuCgMode_FULL    CriuCgMode = 4
	CriuCgMode_STRICT  CriuCgMode = 5
	CriuCgMode_DEFAULT CriuCgMode = 6
)

var CriuCgMode_name = map[int32]string{
	0: "IGNORE",
	1: "CG_NONE",
	2: "PROPS",
	3: "SOFT",
	4: "FULL",
	5: "STRICT",
	6: "DEFAULT",
}
var CriuCgMode_value = map[string]int32{
	"IGNORE":  0,
	"CG_NONE": 1,
	"PROPS":   2,
	"SOFT":    3,
	"FULL":    4,
	"STRICT":  5,
	"DEFAULT": 6,
}

func (x CriuCgMode) Enum() *CriuCgMode {
	p := new(CriuCgMode)
	*p = x
	return p
}
func (x CriuCgMode) String() string {
	return proto.EnumName(CriuCgMode_name, int32(x))
}
func (x *CriuCgMode) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CriuCgMode_value, data, "CriuCgMode")
	if err != nil {
		return err
	}
	*x = CriuCgMode(value)
	return nil
}
func (CriuCgMode) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type CriuReqType int32

const (
	CriuReqType_EMPTY            CriuReqType = 0
	CriuReqType_DUMP             CriuReqType = 1
	CriuReqType_RESTORE          CriuReqType = 2
	CriuReqType_CHECK            CriuReqType = 3
	CriuReqType_PRE_DUMP         CriuReqType = 4
	CriuReqType_PAGE_SERVER      CriuReqType = 5
	CriuReqType_NOTIFY           CriuReqType = 6
	CriuReqType_CPUINFO_DUMP     CriuReqType = 7
	CriuReqType_CPUINFO_CHECK    CriuReqType = 8
	CriuReqType_FEATURE_CHECK    CriuReqType = 9
	CriuReqType_VERSION          CriuReqType = 10
	CriuReqType_WAIT_PID         CriuReqType = 11
	CriuReqType_PAGE_SERVER_CHLD CriuReqType = 12
	CriuReqType_LAZY_PAGES       CriuReqType = 13
)

var CriuReqType_name = map[int32]string{
	0:  "EMPTY",
	1:  "DUMP",
	2:  "RESTORE",
	3:  "CHECK",
	4:  "PRE_DUMP",
	5:  "PAGE_SERVER",
	6:  "NOTIFY",
	7:  "CPUINFO_DUMP",
	8:  "CPUINFO_CHECK",
	9:  "FEATURE_CHECK",
	10: "VERSION",
	11: "WAIT_PID",
	12: "PAGE_SERVER_CHLD",
	13: "LAZY_PAGES",
}
var CriuReqType_value = map[string]int32{
	"EMPTY":            0,
	"DUMP":             1,
	"RESTORE":          2,
	"CHECK":            3,
	"PRE_DUMP":         4,
	"PAGE_SERVER":      5,
	"NOTIFY":           6,
	"CPUINFO_DUMP":     7,
	"CPUINFO_CHECK":    8,
	"FEATURE_CHECK":    9,
	"VERSION":          10,
	"WAIT_PID":         11,
	"PAGE_SERVER_CHLD": 12,
	"LAZY_PAGES":       13,
}

func (x CriuReqType) Enum() *CriuReqType {
	p := new(CriuReqType)
	*p = x
	return p
}
func (x CriuReqType) String() string {
	return proto.EnumName(CriuReqType_name, int32(x))
}
func (x *CriuReqType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CriuReqType_value, data, "CriuReqType")
	if err != nil {
		return err
	}
	*x = CriuReqType(value)
	return nil
}
func (CriuReqType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type CriuPageServerInfo struct {
	Address          *string `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
	Port             *int32  `protobuf:"varint,2,opt,name=port" json:"port,omitempty"`
	Pid              *int32  `protobuf:"varint,3,opt,name=pid" json:"pid,omitempty"`
	Fd               *int32  `protobuf:"varint,4,opt,name=fd" json:"fd,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CriuPageServerInfo) Reset()                    { *m = CriuPageServerInfo{} }
func (m *CriuPageServerInfo) String() string            { return proto.CompactTextString(m) }
func (*CriuPageServerInfo) ProtoMessage()               {}
func (*CriuPageServerInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *CriuPageServerInfo) GetAddress() string {
	if m != nil && m.Address != nil {
		return *m.Address
	}
	return ""
}

func (m *CriuPageServerInfo) GetPort() int32 {
	if m != nil && m.Port != nil {
		return *m.Port
	}
	return 0
}

func (m *CriuPageServerInfo) GetPid() int32 {
	if m != nil && m.Pid != nil {
		return *m.Pid
	}
	return 0
}

func (m *CriuPageServerInfo) GetFd() int32 {
	if m != nil && m.Fd != nil {
		return *m.Fd
	}
	return 0
}

type CriuVethPair struct {
	IfIn             *string `protobuf:"bytes,1,req,name=if_in" json:"if_in,omitempty"`
	IfOut            *string `protobuf:"bytes,2,req,name=if_out" json:"if_out,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CriuVethPair) Reset()                    { *m = CriuVethPair{} }
func (m *CriuVethPair) String() string            { return proto.CompactTextString(m) }
func (*CriuVethPair) ProtoMessage()               {}
func (*CriuVethPair) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *CriuVethPair) GetIfIn() string {
	if m != nil && m.IfIn != nil {
		return *m.IfIn
	}
	return ""
}

func (m *CriuVethPair) GetIfOut() string {
	if m != nil && m.IfOut != nil {
		return *m.IfOut
	}
	return ""
}

type ExtMountMap struct {
	Key              *string `protobuf:"bytes,1,req,name=key" json:"key,omitempty"`
	Val              *string `protobuf:"bytes,2,req,name=val" json:"val,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ExtMountMap) Reset()                    { *m = ExtMountMap{} }
func (m *ExtMountMap) String() string            { return proto.CompactTextString(m) }
func (*ExtMountMap) ProtoMessage()               {}
func (*ExtMountMap) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ExtMountMap) GetKey() string {
	if m != nil && m.Key != nil {
		return *m.Key
	}
	return ""
}

func (m *ExtMountMap) GetVal() string {
	if m != nil && m.Val != nil {
		return *m.Val
	}
	return ""
}

type JoinNamespace struct {
	Ns               *string `protobuf:"bytes,1,req,name=ns" json:"ns,omitempty"`
	NsFile           *string `protobuf:"bytes,2,req,name=ns_file" json:"ns_file,omitempty"`
	ExtraOpt         *string `protobuf:"bytes,3,opt,name=extra_opt" json:"extra_opt,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *JoinNamespace) Reset()                    { *m = JoinNamespace{} }
func (m *JoinNamespace) String() string            { return proto.CompactTextString(m) }
func (*JoinNamespace) ProtoMessage()               {}
func (*JoinNamespace) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *JoinNamespace) GetNs() string {
	if m != nil && m.Ns != nil {
		return *m.Ns
	}
	return ""
}

func (m *JoinNamespace) GetNsFile() string {
	if m != nil && m.NsFile != nil {
		return *m.NsFile
	}
	return ""
}

func (m *JoinNamespace) GetExtraOpt() string {
	if m != nil && m.ExtraOpt != nil {
		return *m.ExtraOpt
	}
	return ""
}

type InheritFd struct {
	Key              *string `protobuf:"bytes,1,req,name=key" json:"key,omitempty"`
	Fd               *int32  `protobuf:"varint,2,req,name=fd" json:"fd,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *InheritFd) Reset()                    { *m = InheritFd{} }
func (m *InheritFd) String() string            { return proto.CompactTextString(m) }
func (*InheritFd) ProtoMessage()               {}
func (*InheritFd) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *InheritFd) GetKey() string {
	if m != nil && m.Key != nil {
		return *m.Key
	}
	return ""
}

func (m *InheritFd) GetFd() int32 {
	if m != nil && m.Fd != nil {
		return *m.Fd
	}
	return 0
}

type CgroupRoot struct {
	Ctrl             *string `protobuf:"bytes,1,opt,name=ctrl" json:"ctrl,omitempty"`
	Path             *string `protobuf:"bytes,2,req,name=path" json:"path,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CgroupRoot) Reset()                    { *m = CgroupRoot{} }
func (m *CgroupRoot) String() string            { return proto.CompactTextString(m) }
func (*CgroupRoot) ProtoMessage()               {}
func (*CgroupRoot) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *CgroupRoot) GetCtrl() string {
	if m != nil && m.Ctrl != nil {
		return *m.Ctrl
	}
	return ""
}

func (m *CgroupRoot) GetPath() string {
	if m != nil && m.Path != nil {
		return *m.Path
	}
	return ""
}

type UnixSk struct {
	Inode            *uint32 `protobuf:"varint,1,req,name=inode" json:"inode,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *UnixSk) Reset()                    { *m = UnixSk{} }
func (m *UnixSk) String() string            { return proto.CompactTextString(m) }
func (*UnixSk) ProtoMessage()               {}
func (*UnixSk) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *UnixSk) GetInode() uint32 {
	if m != nil && m.Inode != nil {
		return *m.Inode
	}
	return 0
}

type CriuOpts struct {
	ImagesDirFd          *int32              `protobuf:"varint,1,req,name=images_dir_fd" json:"images_dir_fd,omitempty"`
	Pid                  *int32              `protobuf:"varint,2,opt,name=pid" json:"pid,omitempty"`
	LeaveRunning         *bool               `protobuf:"varint,3,opt,name=leave_running" json:"leave_running,omitempty"`
	ExtUnixSk            *bool               `protobuf:"varint,4,opt,name=ext_unix_sk" json:"ext_unix_sk,omitempty"`
	TcpEstablished       *bool               `protobuf:"varint,5,opt,name=tcp_established" json:"tcp_established,omitempty"`
	EvasiveDevices       *bool               `protobuf:"varint,6,opt,name=evasive_devices" json:"evasive_devices,omitempty"`
	ShellJob             *bool               `protobuf:"varint,7,opt,name=shell_job" json:"shell_job,omitempty"`
	FileLocks            *bool               `protobuf:"varint,8,opt,name=file_locks" json:"file_locks,omitempty"`
	LogLevel             *int32              `protobuf:"varint,9,opt,name=log_level,def=2" json:"log_level,omitempty"`
	LogFile              *string             `protobuf:"bytes,10,opt,name=log_file" json:"log_file,omitempty"`
	Ps                   *CriuPageServerInfo `protobuf:"bytes,11,opt,name=ps" json:"ps,omitempty"`
	NotifyScripts        *bool               `protobuf:"varint,12,opt,name=notify_scripts" json:"notify_scripts,omitempty"`
	Root                 *string             `protobuf:"bytes,13,opt,name=root" json:"root,omitempty"`
	ParentImg            *string             `protobuf:"bytes,14,opt,name=parent_img" json:"parent_img,omitempty"`
	TrackMem             *bool               `protobuf:"varint,15,opt,name=track_mem" json:"track_mem,omitempty"`
	AutoDedup            *bool               `protobuf:"varint,16,opt,name=auto_dedup" json:"auto_dedup,omitempty"`
	WorkDirFd            *int32              `protobuf:"varint,17,opt,name=work_dir_fd" json:"work_dir_fd,omitempty"`
	LinkRemap            *bool               `protobuf:"varint,18,opt,name=link_remap" json:"link_remap,omitempty"`
	Veths                []*CriuVethPair     `protobuf:"bytes,19,rep,name=veths" json:"veths,omitempty"`
	CpuCap               *uint32             `protobuf:"varint,20,opt,name=cpu_cap,def=4294967295" json:"cpu_cap,omitempty"`
	ForceIrmap           *bool               `protobuf:"varint,21,opt,name=force_irmap" json:"force_irmap,omitempty"`
	ExecCmd              []string            `protobuf:"bytes,22,rep,name=exec_cmd" json:"exec_cmd,omitempty"`
	ExtMnt               []*ExtMountMap      `protobuf:"bytes,23,rep,name=ext_mnt" json:"ext_mnt,omitempty"`
	ManageCgroups        *bool               `protobuf:"varint,24,opt,name=manage_cgroups" json:"manage_cgroups,omitempty"`
	CgRoot               []*CgroupRoot       `protobuf:"bytes,25,rep,name=cg_root" json:"cg_root,omitempty"`
	RstSibling           *bool               `protobuf:"varint,26,opt,name=rst_sibling" json:"rst_sibling,omitempty"`
	InheritFd            []*InheritFd        `protobuf:"bytes,27,rep,name=inherit_fd" json:"inherit_fd,omitempty"`
	AutoExtMnt           *bool               `protobuf:"varint,28,opt,name=auto_ext_mnt" json:"auto_ext_mnt,omitempty"`
	ExtSharing           *bool               `protobuf:"varint,29,opt,name=ext_sharing" json:"ext_sharing,omitempty"`
	ExtMasters           *bool               `protobuf:"varint,30,opt,name=ext_masters" json:"ext_masters,omitempty"`
	SkipMnt              []string            `protobuf:"bytes,31,rep,name=skip_mnt" json:"skip_mnt,omitempty"`
	EnableFs             []string            `protobuf:"bytes,32,rep,name=enable_fs" json:"enable_fs,omitempty"`
	UnixSkIno            []*UnixSk           `protobuf:"bytes,33,rep,name=unix_sk_ino" json:"unix_sk_ino,omitempty"`
	ManageCgroupsMode    *CriuCgMode         `protobuf:"varint,34,opt,name=manage_cgroups_mode,enum=CriuCgMode" json:"manage_cgroups_mode,omitempty"`
	GhostLimit           *uint32             `protobuf:"varint,35,opt,name=ghost_limit,def=1048576" json:"ghost_limit,omitempty"`
	IrmapScanPaths       []string            `protobuf:"bytes,36,rep,name=irmap_scan_paths" json:"irmap_scan_paths,omitempty"`
	External             []string            `protobuf:"bytes,37,rep,name=external" json:"external,omitempty"`
	EmptyNs              *uint32             `protobuf:"varint,38,opt,name=empty_ns" json:"empty_ns,omitempty"`
	JoinNs               []*JoinNamespace    `protobuf:"bytes,39,rep,name=join_ns" json:"join_ns,omitempty"`
	CgroupProps          *string             `protobuf:"bytes,41,opt,name=cgroup_props" json:"cgroup_props,omitempty"`
	CgroupPropsFile      *string             `protobuf:"bytes,42,opt,name=cgroup_props_file" json:"cgroup_props_file,omitempty"`
	CgroupDumpController []string            `protobuf:"bytes,43,rep,name=cgroup_dump_controller" json:"cgroup_dump_controller,omitempty"`
	FreezeCgroup         *string             `protobuf:"bytes,44,opt,name=freeze_cgroup" json:"freeze_cgroup,omitempty"`
	Timeout              *uint32             `protobuf:"varint,45,opt,name=timeout" json:"timeout,omitempty"`
	TcpSkipInFlight      *bool               `protobuf:"varint,46,opt,name=tcp_skip_in_flight" json:"tcp_skip_in_flight,omitempty"`
	WeakSysctls          *bool               `protobuf:"varint,47,opt,name=weak_sysctls" json:"weak_sysctls,omitempty"`
	LazyPages            *bool               `protobuf:"varint,48,opt,name=lazy_pages" json:"lazy_pages,omitempty"`
	StatusFd             *int32              `protobuf:"varint,49,opt,name=status_fd" json:"status_fd,omitempty"`
	OrphanPtsMaster      *bool               `protobuf:"varint,50,opt,name=orphan_pts_master" json:"orphan_pts_master,omitempty"`
	XXX_unrecognized     []byte              `json:"-"`
}

func (m *CriuOpts) Reset()                    { *m = CriuOpts{} }
func (m *CriuOpts) String() string            { return proto.CompactTextString(m) }
func (*CriuOpts) ProtoMessage()               {}
func (*CriuOpts) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

const Default_CriuOpts_LogLevel int32 = 2
const Default_CriuOpts_CpuCap uint32 = 4294967295
const Default_CriuOpts_GhostLimit uint32 = 1048576

func (m *CriuOpts) GetImagesDirFd() int32 {
	if m != nil && m.ImagesDirFd != nil {
		return *m.ImagesDirFd
	}
	return 0
}

func (m *CriuOpts) GetPid() int32 {
	if m != nil && m.Pid != nil {
		return *m.Pid
	}
	return 0
}

func (m *CriuOpts) GetLeaveRunning() bool {
	if m != nil && m.LeaveRunning != nil {
		return *m.LeaveRunning
	}
	return false
}

func (m *CriuOpts) GetExtUnixSk() bool {
	if m != nil && m.ExtUnixSk != nil {
		return *m.ExtUnixSk
	}
	return false
}

func (m *CriuOpts) GetTcpEstablished() bool {
	if m != nil && m.TcpEstablished != nil {
		return *m.TcpEstablished
	}
	return false
}

func (m *CriuOpts) GetEvasiveDevices() bool {
	if m != nil && m.EvasiveDevices != nil {
		return *m.EvasiveDevices
	}
	return false
}

func (m *CriuOpts) GetShellJob() bool {
	if m != nil && m.ShellJob != nil {
		return *m.ShellJob
	}
	return false
}

func (m *CriuOpts) GetFileLocks() bool {
	if m != nil && m.FileLocks != nil {
		return *m.FileLocks
	}
	return false
}

func (m *CriuOpts) GetLogLevel() int32 {
	if m != nil && m.LogLevel != nil {
		return *m.LogLevel
	}
	return Default_CriuOpts_LogLevel
}

func (m *CriuOpts) GetLogFile() string {
	if m != nil && m.LogFile != nil {
		return *m.LogFile
	}
	return ""
}

func (m *CriuOpts) GetPs() *CriuPageServerInfo {
	if m != nil {
		return m.Ps
	}
	return nil
}

func (m *CriuOpts) GetNotifyScripts() bool {
	if m != nil && m.NotifyScripts != nil {
		return *m.NotifyScripts
	}
	return false
}

func (m *CriuOpts) GetRoot() string {
	if m != nil && m.Root != nil {
		return *m.Root
	}
	return ""
}

func (m *CriuOpts) GetParentImg() string {
	if m != nil && m.ParentImg != nil {
		return *m.ParentImg
	}
	return ""
}

func (m *CriuOpts) GetTrackMem() bool {
	if m != nil && m.TrackMem != nil {
		return *m.TrackMem
	}
	return false
}

func (m *CriuOpts) GetAutoDedup() bool {
	if m != nil && m.AutoDedup != nil {
		return *m.AutoDedup
	}
	return false
}

func (m *CriuOpts) GetWorkDirFd() int32 {
	if m != nil && m.WorkDirFd != nil {
		return *m.WorkDirFd
	}
	return 0
}

func (m *CriuOpts) GetLinkRemap() bool {
	if m != nil && m.LinkRemap != nil {
		return *m.LinkRemap
	}
	return false
}

func (m *CriuOpts) GetVeths() []*CriuVethPair {
	if m != nil {
		return m.Veths
	}
	return nil
}

func (m *CriuOpts) GetCpuCap() uint32 {
	if m != nil && m.CpuCap != nil {
		return *m.CpuCap
	}
	return Default_CriuOpts_CpuCap
}

func (m *CriuOpts) GetForceIrmap() bool {
	if m != nil && m.ForceIrmap != nil {
		return *m.ForceIrmap
	}
	return false
}

func (m *CriuOpts) GetExecCmd() []string {
	if m != nil {
		return m.ExecCmd
	}
	return nil
}

func (m *CriuOpts) GetExtMnt() []*ExtMountMap {
	if m != nil {
		return m.ExtMnt
	}
	return nil
}

func (m *CriuOpts) GetManageCgroups() bool {
	if m != nil && m.ManageCgroups != nil {
		return *m.ManageCgroups
	}
	return false
}

func (m *CriuOpts) GetCgRoot() []*CgroupRoot {
	if m != nil {
		return m.CgRoot
	}
	return nil
}

func (m *CriuOpts) GetRstSibling() bool {
	if m != nil && m.RstSibling != nil {
		return *m.RstSibling
	}
	return false
}

func (m *CriuOpts) GetInheritFd() []*InheritFd {
	if m != nil {
		return m.InheritFd
	}
	return nil
}

func (m *CriuOpts) GetAutoExtMnt() bool {
	if m != nil && m.AutoExtMnt != nil {
		return *m.AutoExtMnt
	}
	return false
}

func (m *CriuOpts) GetExtSharing() bool {
	if m != nil && m.ExtSharing != nil {
		return *m.ExtSharing
	}
	return false
}

func (m *CriuOpts) GetExtMasters() bool {
	if m != nil && m.ExtMasters != nil {
		return *m.ExtMasters
	}
	return false
}

func (m *CriuOpts) GetSkipMnt() []string {
	if m != nil {
		return m.SkipMnt
	}
	return nil
}

func (m *CriuOpts) GetEnableFs() []string {
	if m != nil {
		return m.EnableFs
	}
	return nil
}

func (m *CriuOpts) GetUnixSkIno() []*UnixSk {
	if m != nil {
		return m.UnixSkIno
	}
	return nil
}

func (m *CriuOpts) GetManageCgroupsMode() CriuCgMode {
	if m != nil && m.ManageCgroupsMode != nil {
		return *m.ManageCgroupsMode
	}
	return CriuCgMode_IGNORE
}

func (m *CriuOpts) GetGhostLimit() uint32 {
	if m != nil && m.GhostLimit != nil {
		return *m.GhostLimit
	}
	return Default_CriuOpts_GhostLimit
}

func (m *CriuOpts) GetIrmapScanPaths() []string {
	if m != nil {
		return m.IrmapScanPaths
	}
	return nil
}

func (m *CriuOpts) GetExternal() []string {
	if m != nil {
		return m.External
	}
	return nil
}

func (m *CriuOpts) GetEmptyNs() uint32 {
	if m != nil && m.EmptyNs != nil {
		return *m.EmptyNs
	}
	return 0
}

func (m *CriuOpts) GetJoinNs() []*JoinNamespace {
	if m != nil {
		return m.JoinNs
	}
	return nil
}

func (m *CriuOpts) GetCgroupProps() string {
	if m != nil && m.CgroupProps != nil {
		return *m.CgroupProps
	}
	return ""
}

func (m *CriuOpts) GetCgroupPropsFile() string {
	if m != nil && m.CgroupPropsFile != nil {
		return *m.CgroupPropsFile
	}
	return ""
}

func (m *CriuOpts) GetCgroupDumpController() []string {
	if m != nil {
		return m.CgroupDumpController
	}
	return nil
}

func (m *CriuOpts) GetFreezeCgroup() string {
	if m != nil && m.FreezeCgroup != nil {
		return *m.FreezeCgroup
	}
	return ""
}

func (m *CriuOpts) GetTimeout() uint32 {
	if m != nil && m.Timeout != nil {
		return *m.Timeout
	}
	return 0
}

func (m *CriuOpts) GetTcpSkipInFlight() bool {
	if m != nil && m.TcpSkipInFlight != nil {
		return *m.TcpSkipInFlight
	}
	return false
}

func (m *CriuOpts) GetWeakSysctls() bool {
	if m != nil && m.WeakSysctls != nil {
		return *m.WeakSysctls
	}
	return false
}

func (m *CriuOpts) GetLazyPages() bool {
	if m != nil && m.LazyPages != nil {
		return *m.LazyPages
	}
	return false
}

func (m *CriuOpts) GetStatusFd() int32 {
	if m != nil && m.StatusFd != nil {
		return *m.StatusFd
	}
	return 0
}

func (m *CriuOpts) GetOrphanPtsMaster() bool {
	if m != nil && m.OrphanPtsMaster != nil {
		return *m.OrphanPtsMaster
	}
	return false
}

type CriuDumpResp struct {
	Restored         *bool  `protobuf:"varint,1,opt,name=restored" json:"restored,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CriuDumpResp) Reset()                    { *m = CriuDumpResp{} }
func (m *CriuDumpResp) String() string            { return proto.CompactTextString(m) }
func (*CriuDumpResp) ProtoMessage()               {}
func (*CriuDumpResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *CriuDumpResp) GetRestored() bool {
	if m != nil && m.Restored != nil {
		return *m.Restored
	}
	return false
}

type CriuRestoreResp struct {
	Pid              *int32 `protobuf:"varint,1,req,name=pid" json:"pid,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CriuRestoreResp) Reset()                    { *m = CriuRestoreResp{} }
func (m *CriuRestoreResp) String() string            { return proto.CompactTextString(m) }
func (*CriuRestoreResp) ProtoMessage()               {}
func (*CriuRestoreResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *CriuRestoreResp) GetPid() int32 {
	if m != nil && m.Pid != nil {
		return *m.Pid
	}
	return 0
}

type CriuNotify struct {
	Script           *string `protobuf:"bytes,1,opt,name=script" json:"script,omitempty"`
	Pid              *int32  `protobuf:"varint,2,opt,name=pid" json:"pid,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CriuNotify) Reset()                    { *m = CriuNotify{} }
func (m *CriuNotify) String() string            { return proto.CompactTextString(m) }
func (*CriuNotify) ProtoMessage()               {}
func (*CriuNotify) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *CriuNotify) GetScript() string {
	if m != nil && m.Script != nil {
		return *m.Script
	}
	return ""
}

func (m *CriuNotify) GetPid() int32 {
	if m != nil && m.Pid != nil {
		return *m.Pid
	}
	return 0
}

//
// List of features which can queried via
// CRIU_REQ_TYPE__FEATURE_CHECK
type CriuFeatures struct {
	MemTrack         *bool  `protobuf:"varint,1,opt,name=mem_track" json:"mem_track,omitempty"`
	LazyPages        *bool  `protobuf:"varint,2,opt,name=lazy_pages" json:"lazy_pages,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CriuFeatures) Reset()                    { *m = CriuFeatures{} }
func (m *CriuFeatures) String() string            { return proto.CompactTextString(m) }
func (*CriuFeatures) ProtoMessage()               {}
func (*CriuFeatures) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *CriuFeatures) GetMemTrack() bool {
	if m != nil && m.MemTrack != nil {
		return *m.MemTrack
	}
	return false
}

func (m *CriuFeatures) GetLazyPages() bool {
	if m != nil && m.LazyPages != nil {
		return *m.LazyPages
	}
	return false
}

type CriuReq struct {
	Type          *CriuReqType `protobuf:"varint,1,req,name=type,enum=CriuReqType" json:"type,omitempty"`
	Opts          *CriuOpts    `protobuf:"bytes,2,opt,name=opts" json:"opts,omitempty"`
	NotifySuccess *bool        `protobuf:"varint,3,opt,name=notify_success" json:"notify_success,omitempty"`
	//
	// When set service won't close the connection but
	// will wait for more req-s to appear. Works not
	// for all request types.
	KeepOpen *bool `protobuf:"varint,4,opt,name=keep_open" json:"keep_open,omitempty"`
	//
	// 'features' can be used to query which features
	// are supported by the installed criu/kernel
	// via RPC.
	Features *CriuFeatures `protobuf:"bytes,5,opt,name=features" json:"features,omitempty"`
	// 'pid' is used for WAIT_PID
	Pid              *uint32 `protobuf:"varint,6,opt,name=pid" json:"pid,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CriuReq) Reset()                    { *m = CriuReq{} }
func (m *CriuReq) String() string            { return proto.CompactTextString(m) }
func (*CriuReq) ProtoMessage()               {}
func (*CriuReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *CriuReq) GetType() CriuReqType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return CriuReqType_EMPTY
}

func (m *CriuReq) GetOpts() *CriuOpts {
	if m != nil {
		return m.Opts
	}
	return nil
}

func (m *CriuReq) GetNotifySuccess() bool {
	if m != nil && m.NotifySuccess != nil {
		return *m.NotifySuccess
	}
	return false
}

func (m *CriuReq) GetKeepOpen() bool {
	if m != nil && m.KeepOpen != nil {
		return *m.KeepOpen
	}
	return false
}

func (m *CriuReq) GetFeatures() *CriuFeatures {
	if m != nil {
		return m.Features
	}
	return nil
}

func (m *CriuReq) GetPid() uint32 {
	if m != nil && m.Pid != nil {
		return *m.Pid
	}
	return 0
}

type CriuResp struct {
	Type             *CriuReqType        `protobuf:"varint,1,req,name=type,enum=CriuReqType" json:"type,omitempty"`
	Success          *bool               `protobuf:"varint,2,req,name=success" json:"success,omitempty"`
	Dump             *CriuDumpResp       `protobuf:"bytes,3,opt,name=dump" json:"dump,omitempty"`
	Restore          *CriuRestoreResp    `protobuf:"bytes,4,opt,name=restore" json:"restore,omitempty"`
	Notify           *CriuNotify         `protobuf:"bytes,5,opt,name=notify" json:"notify,omitempty"`
	Ps               *CriuPageServerInfo `protobuf:"bytes,6,opt,name=ps" json:"ps,omitempty"`
	CrErrno          *int32              `protobuf:"varint,7,opt,name=cr_errno" json:"cr_errno,omitempty"`
	Features         *CriuFeatures       `protobuf:"bytes,8,opt,name=features" json:"features,omitempty"`
	CrErrmsg         *string             `protobuf:"bytes,9,opt,name=cr_errmsg" json:"cr_errmsg,omitempty"`
	Version          *CriuVersion        `protobuf:"bytes,10,opt,name=version" json:"version,omitempty"`
	Status           *int32              `protobuf:"varint,11,opt,name=status" json:"status,omitempty"`
	XXX_unrecognized []byte              `json:"-"`
}

func (m *CriuResp) Reset()                    { *m = CriuResp{} }
func (m *CriuResp) String() string            { return proto.CompactTextString(m) }
func (*CriuResp) ProtoMessage()               {}
func (*CriuResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *CriuResp) GetType() CriuReqType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return CriuReqType_EMPTY
}

func (m *CriuResp) GetSuccess() bool {
	if m != nil && m.Success != nil {
		return *m.Success
	}
	return false
}

func (m *CriuResp) GetDump() *CriuDumpResp {
	if m != nil {
		return m.Dump
	}
	return nil
}

func (m *CriuResp) GetRestore() *CriuRestoreResp {
	if m != nil {
		return m.Restore
	}
	return nil
}

func (m *CriuResp) GetNotify() *CriuNotify {
	if m != nil {
		return m.Notify
	}
	return nil
}

func (m *CriuResp) GetPs() *CriuPageServerInfo {
	if m != nil {
		return m.Ps
	}
	return nil
}

func (m *CriuResp) GetCrErrno() int32 {
	if m != nil && m.CrErrno != nil {
		return *m.CrErrno
	}
	return 0
}

func (m *CriuResp) GetFeatures() *CriuFeatures {
	if m != nil {
		return m.Features
	}
	return nil
}

func (m *CriuResp) GetCrErrmsg() string {
	if m != nil && m.CrErrmsg != nil {
		return *m.CrErrmsg
	}
	return ""
}

func (m *CriuResp) GetVersion() *CriuVersion {
	if m != nil {
		return m.Version
	}
	return nil
}

func (m *CriuResp) GetStatus() int32 {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return 0
}

// Answer for criu_req_type.VERSION requests
type CriuVersion struct {
	Major            *int32  `protobuf:"varint,1,req,name=major" json:"major,omitempty"`
	Minor            *int32  `protobuf:"varint,2,req,name=minor" json:"minor,omitempty"`
	Gitid            *string `protobuf:"bytes,3,opt,name=gitid" json:"gitid,omitempty"`
	Sublevel         *int32  `protobuf:"varint,4,opt,name=sublevel" json:"sublevel,omitempty"`
	Extra            *int32  `protobuf:"varint,5,opt,name=extra" json:"extra,omitempty"`
	Name             *string `protobuf:"bytes,6,opt,name=name" json:"name,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CriuVersion) Reset()                    { *m = CriuVersion{} }
func (m *CriuVersion) String() string            { return proto.CompactTextString(m) }
func (*CriuVersion) ProtoMessage()               {}
func (*CriuVersion) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *CriuVersion) GetMajor() int32 {
	if m != nil && m.Major != nil {
		return *m.Major
	}
	return 0
}

func (m *CriuVersion) GetMinor() int32 {
	if m != nil && m.Minor != nil {
		return *m.Minor
	}
	return 0
}

func (m *CriuVersion) GetGitid() string {
	if m != nil && m.Gitid != nil {
		return *m.Gitid
	}
	return ""
}

func (m *CriuVersion) GetSublevel() int32 {
	if m != nil && m.Sublevel != nil {
		return *m.Sublevel
	}
	return 0
}

func (m *CriuVersion) GetExtra() int32 {
	if m != nil && m.Extra != nil {
		return *m.Extra
	}
	return 0
}

func (m *CriuVersion) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func init() {
	proto.RegisterType((*CriuPageServerInfo)(nil), "criu_page_server_info")
	proto.RegisterType((*CriuVethPair)(nil), "criu_veth_pair")
	proto.RegisterType((*ExtMountMap)(nil), "ext_mount_map")
	proto.RegisterType((*JoinNamespace)(nil), "join_namespace")
	proto.RegisterType((*InheritFd)(nil), "inherit_fd")
	proto.RegisterType((*CgroupRoot)(nil), "cgroup_root")
	proto.RegisterType((*UnixSk)(nil), "unix_sk")
	proto.RegisterType((*CriuOpts)(nil), "criu_opts")
	proto.RegisterType((*CriuDumpResp)(nil), "criu_dump_resp")
	proto.RegisterType((*CriuRestoreResp)(nil), "criu_restore_resp")
	proto.RegisterType((*CriuNotify)(nil), "criu_notify")
	proto.RegisterType((*CriuFeatures)(nil), "criu_features")
	proto.RegisterType((*CriuReq)(nil), "criu_req")
	proto.RegisterType((*CriuResp)(nil), "criu_resp")
	proto.RegisterType((*CriuVersion)(nil), "criu_version")
	proto.RegisterEnum("CriuCgMode", CriuCgMode_name, CriuCgMode_value)
	proto.RegisterEnum("CriuReqType", CriuReqType_name, CriuReqType_value)
}

func init() { proto.RegisterFile("rpc.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1447 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x56, 0xdb, 0x72, 0xdb, 0xc8,
	0x11, 0x5d, 0x5e, 0x41, 0x34, 0x78, 0x01, 0xa1, 0xcb, 0x8e, 0x77, 0x65, 0x9b, 0xe1, 0x66, 0x13,
	0x5a, 0x49, 0xb8, 0xbb, 0x2c, 0xaf, 0x37, 0xde, 0xa7, 0xa8, 0x24, 0xca, 0x56, 0x45, 0x16, 0x59,
	0x14, 0xe5, 0x94, 0xf3, 0x32, 0x05, 0x81, 0x43, 0x72, 0x44, 0x00, 0x83, 0xcc, 0x0c, 0x69, 0xc9,
	0x3f, 0x92, 0x97, 0xfc, 0x47, 0x7e, 0x27, 0x9f, 0x92, 0x9a, 0x06, 0x20, 0x53, 0x5e, 0x97, 0xdf,
	0xc8, 0x9e, 0xbe, 0x9e, 0xee, 0x3e, 0x0d, 0xb0, 0x65, 0x12, 0xf4, 0x13, 0x29, 0xb4, 0xe8, 0x8e,
	0x60, 0x2f, 0x90, 0x7c, 0x4d, 0x13, 0x7f, 0xc1, 0xa8, 0x62, 0x72, 0xc3, 0x24, 0xe5, 0xf1, 0x5c,
	0x78, 0x2d, 0xb0, 0xfc, 0xd9, 0x4c, 0x32, 0xa5, 0x48, 0xa1, 0x53, 0xe8, 0xd9, 0x5e, 0x1d, 0xca,
	0x89, 0x90, 0x9a, 0x14, 0x3b, 0x85, 0x5e, 0xc5, 0x73, 0xa0, 0x94, 0xf0, 0x19, 0x29, 0xe1, 0x1f,
	0x80, 0xe2, 0x7c, 0x46, 0xca, 0xe6, 0x77, 0xf7, 0x07, 0x68, 0xa2, 0xc3, 0x0d, 0xd3, 0x4b, 0x9a,
	0xf8, 0x5c, 0x7a, 0x0d, 0xa8, 0xf0, 0x39, 0xe5, 0x31, 0x29, 0x74, 0x8a, 0x3d, 0xdb, 0x6b, 0x42,
	0x95, 0xcf, 0xa9, 0x58, 0x1b, 0x4f, 0xc5, 0x9e, 0xdd, 0x7d, 0x06, 0x0d, 0x76, 0xab, 0x69, 0x24,
	0xd6, 0xb1, 0xa6, 0x91, 0x9f, 0x18, 0xd7, 0x2b, 0x76, 0x97, 0x69, 0x3b, 0x50, 0xda, 0xf8, 0x61,
	0xa6, 0xfa, 0x37, 0x68, 0xde, 0x08, 0x1e, 0xd3, 0xd8, 0x8f, 0x98, 0x4a, 0xfc, 0x80, 0x99, 0xc8,
	0xb1, 0xca, 0x54, 0x5b, 0x60, 0xc5, 0x8a, 0xce, 0x79, 0xc8, 0x52, 0x75, 0xaf, 0x0d, 0x36, 0xbb,
	0xd5, 0xd2, 0xa7, 0x22, 0xd1, 0x98, 0xa9, 0xdd, 0xfd, 0x1e, 0x80, 0xc7, 0x4b, 0x26, 0xb9, 0xa6,
	0xf3, 0xd9, 0xc3, 0x48, 0x69, 0x11, 0xc6, 0xb2, 0xd2, 0x7d, 0x06, 0x4e, 0xb0, 0x90, 0x62, 0x9d,
	0x50, 0x29, 0x84, 0x36, 0xa5, 0x07, 0x5a, 0x86, 0x5b, 0x40, 0xf8, 0x7a, 0x99, 0xe5, 0x44, 0xc0,
	0x5a, 0xc7, 0xfc, 0x96, 0xaa, 0x15, 0x16, 0x1a, 0x8b, 0x19, 0x43, 0x87, 0x8d, 0xee, 0xbf, 0x6d,
	0xb0, 0x11, 0x0a, 0x91, 0x68, 0xe5, 0xed, 0x41, 0x83, 0x47, 0xfe, 0x82, 0x29, 0x3a, 0xe3, 0x92,
	0xce, 0x67, 0xa8, 0x74, 0x8f, 0x63, 0x0a, 0xea, 0x1e, 0x34, 0x42, 0xe6, 0x6f, 0x18, 0x95, 0xeb,
	0x38, 0xe6, 0xf1, 0x02, 0x93, 0xae, 0x79, 0x3b, 0xe0, 0x18, 0x84, 0xb2, 0x30, 0x88, 0x73, 0xcd,
	0xfb, 0x1a, 0x5a, 0x3a, 0x48, 0x28, 0x53, 0xda, 0xbf, 0x0e, 0xb9, 0x5a, 0xb2, 0x19, 0xa9, 0xe4,
	0x0f, 0x6c, 0xe3, 0x2b, 0xbe, 0x61, 0x74, 0xc6, 0x36, 0x3c, 0x60, 0x8a, 0x54, 0xf1, 0xa1, 0x0d,
	0xb6, 0x5a, 0xb2, 0x30, 0xa4, 0x37, 0xe2, 0x9a, 0x58, 0x28, 0xf2, 0x00, 0x0c, 0x5e, 0x34, 0x14,
	0xc1, 0x4a, 0x91, 0x1a, 0xca, 0x76, 0xc1, 0x0e, 0xc5, 0x82, 0x86, 0x6c, 0xc3, 0x42, 0x62, 0x9b,
	0xbc, 0x7e, 0x2d, 0x0c, 0x3c, 0x17, 0x6a, 0x46, 0x8a, 0xe8, 0x02, 0xc2, 0xd0, 0x85, 0x62, 0xa2,
	0x88, 0xd3, 0x29, 0xf4, 0x9c, 0xc1, 0x7e, 0xff, 0xf3, 0x43, 0xb4, 0x0f, 0xcd, 0x58, 0x68, 0x3e,
	0xbf, 0xa3, 0x2a, 0x90, 0x3c, 0xd1, 0x8a, 0xd4, 0x31, 0x46, 0x1d, 0xca, 0x06, 0x58, 0xd2, 0x40,
	0x4f, 0x1e, 0x40, 0xe2, 0x4b, 0x16, 0x6b, 0xca, 0xa3, 0x05, 0x69, 0xa2, 0xac, 0x0d, 0xb6, 0x96,
	0x7e, 0xb0, 0xa2, 0x11, 0x8b, 0x48, 0x2b, 0x4f, 0xd6, 0x5f, 0x6b, 0x41, 0x67, 0x6c, 0xb6, 0x4e,
	0x88, 0x9b, 0x43, 0xf3, 0x5e, 0xc8, 0x55, 0x8e, 0x69, 0x1b, 0x61, 0xf4, 0x00, 0x42, 0x1e, 0xaf,
	0xa8, 0x64, 0x91, 0x9f, 0x10, 0x0f, 0x15, 0x9f, 0x40, 0xc5, 0x4c, 0xa4, 0x22, 0x3b, 0x9d, 0x52,
	0xcf, 0x19, 0xb4, 0xfa, 0x9f, 0x0c, 0xe9, 0xb7, 0x60, 0x05, 0xc9, 0x9a, 0x06, 0x7e, 0x42, 0x76,
	0x3b, 0x85, 0x5e, 0xe3, 0x57, 0x78, 0x3e, 0x78, 0xf9, 0xfc, 0xe5, 0x8b, 0x5f, 0x06, 0x2f, 0x7f,
	0x36, 0x51, 0xe6, 0x42, 0x06, 0x8c, 0x72, 0x69, 0x3c, 0xee, 0xa1, 0x47, 0x17, 0x6a, 0xec, 0x96,
	0x05, 0x34, 0x88, 0x66, 0x64, 0xbf, 0x53, 0xea, 0xd9, 0xde, 0x53, 0xb0, 0x70, 0x92, 0x63, 0x4d,
	0xbe, 0xc6, 0x28, 0xcd, 0xfe, 0xc3, 0xc9, 0xde, 0x87, 0x66, 0xe4, 0xc7, 0x06, 0xa4, 0x74, 0xba,
	0x14, 0x21, 0xe8, 0xea, 0x31, 0x58, 0xc1, 0x02, 0x47, 0x8d, 0x3c, 0x42, 0xc3, 0x7a, 0x7f, 0x7b,
	0xfc, 0x76, 0xc0, 0x91, 0x4a, 0x53, 0xc5, 0xaf, 0x43, 0x33, 0x14, 0xdf, 0xa0, 0xcd, 0xd3, 0xed,
	0x49, 0x26, 0xdf, 0xa2, 0x99, 0xd3, 0xdf, 0x1a, 0xee, 0x5d, 0xa8, 0x23, 0x5c, 0x79, 0x4a, 0x07,
	0xdb, 0xb3, 0xa4, 0x96, 0xbe, 0x34, 0xbe, 0x1e, 0x6f, 0x0b, 0x23, 0x5f, 0x69, 0x26, 0x15, 0x79,
	0x92, 0xd7, 0xa7, 0x56, 0x3c, 0x41, 0xdb, 0xa7, 0x58, 0x9f, 0xd9, 0xa7, 0xd8, 0xbf, 0x0e, 0x19,
	0x9d, 0x2b, 0xd2, 0x41, 0xd1, 0x63, 0x70, 0xb2, 0xb1, 0xa4, 0x3c, 0x16, 0xe4, 0x77, 0x98, 0x46,
	0xad, 0x9f, 0x6f, 0xc4, 0x21, 0xec, 0x3c, 0x2c, 0x98, 0x46, 0x66, 0x3f, 0xba, 0x9d, 0x42, 0xaf,
	0x39, 0x68, 0xa4, 0x3d, 0x08, 0x16, 0x28, 0xf4, 0x0e, 0xc0, 0x59, 0x2c, 0x85, 0xd2, 0x34, 0xe4,
	0x11, 0xd7, 0xe4, 0x3b, 0xec, 0x82, 0xf5, 0xd3, 0x8f, 0xcf, 0xff, 0xfa, 0xf3, 0x2f, 0x2f, 0x3c,
	0x02, 0x2e, 0x82, 0x4f, 0x55, 0xe0, 0xc7, 0xd4, 0xec, 0x9f, 0x22, 0xbf, 0xc7, 0x14, 0xb0, 0x0f,
	0x9a, 0xc9, 0xd8, 0x0f, 0xc9, 0xf7, 0xf7, 0x92, 0x28, 0xd1, 0x77, 0x34, 0x56, 0xe4, 0x0f, 0xc6,
	0x8d, 0xd7, 0x01, 0x2b, 0x25, 0x0e, 0x45, 0xfe, 0x98, 0xf5, 0xff, 0x13, 0x22, 0xd9, 0x85, 0x7a,
	0x06, 0x79, 0x22, 0x45, 0xa2, 0xc8, 0x33, 0x9c, 0xc2, 0x47, 0xd0, 0xde, 0x96, 0xa6, 0xe3, 0x7f,
	0x88, 0x4f, 0x4f, 0x60, 0x3f, 0x7b, 0x9a, 0xad, 0xa3, 0x84, 0x06, 0x22, 0xd6, 0x52, 0x84, 0x21,
	0x93, 0xe4, 0x4f, 0x98, 0xc4, 0x1e, 0x34, 0xe6, 0x92, 0xb1, 0x0f, 0x79, 0xe9, 0xe4, 0xcf, 0x68,
	0xd6, 0x02, 0x4b, 0xf3, 0x88, 0x19, 0xfa, 0xfb, 0x0b, 0xa6, 0xf6, 0x0d, 0x78, 0x66, 0x8f, 0x11,
	0x6a, 0x1e, 0xd3, 0x79, 0xc8, 0x17, 0x4b, 0x4d, 0xfa, 0xd9, 0x2a, 0xd6, 0xdf, 0x33, 0x7f, 0x45,
	0xd5, 0x9d, 0x0a, 0x74, 0xa8, 0xc8, 0x0f, 0xf9, 0x1e, 0x84, 0xfe, 0x87, 0x3b, 0xdc, 0x36, 0x45,
	0x7e, 0xbc, 0xdf, 0x6d, 0xed, 0xeb, 0xb5, 0x32, 0xc3, 0xf0, 0x13, 0x6e, 0xc1, 0x23, 0x68, 0x0b,
	0x99, 0x2c, 0x0d, 0x5a, 0x5a, 0x65, 0xbd, 0x25, 0x03, 0xa3, 0xdd, 0xed, 0x66, 0x1c, 0x8d, 0x99,
	0x4b, 0xa6, 0x12, 0x03, 0x99, 0x64, 0x4a, 0x0b, 0xc9, 0x66, 0xc8, 0x72, 0xb5, 0x6e, 0x07, 0xda,
	0xa8, 0x93, 0x89, 0x53, 0xb5, 0x8c, 0xad, 0x90, 0xba, 0xba, 0x87, 0xe0, 0xa0, 0x46, 0xba, 0xe1,
	0x86, 0xd7, 0xd3, 0x25, 0xcf, 0x68, 0x72, 0x9b, 0xd9, 0xba, 0x2f, 0xa0, 0x81, 0xba, 0x73, 0xe6,
	0xeb, 0xb5, 0x64, 0xca, 0x24, 0x1c, 0xb1, 0x88, 0xe2, 0x8e, 0xa7, 0x11, 0x3f, 0xa9, 0xab, 0x88,
	0x59, 0xfc, 0xa7, 0x00, 0xb5, 0x2c, 0x8d, 0x7f, 0x79, 0x07, 0x50, 0xd6, 0x77, 0x49, 0x4a, 0xaf,
	0xcd, 0x41, 0xb3, 0x9f, 0x3f, 0x50, 0x23, 0xf5, 0x08, 0x94, 0x0d, 0xd1, 0xa2, 0xa1, 0x33, 0x80,
	0xfe, 0x47, 0xea, 0xdd, 0x62, 0xa1, 0x75, 0x10, 0x98, 0x8b, 0x56, 0xca, 0x41, 0x5b, 0x31, 0x96,
	0x50, 0x91, 0xb0, 0x38, 0x63, 0xd5, 0x0e, 0xd4, 0xf2, 0x14, 0x91, 0x4e, 0x9d, 0x3c, 0xcc, 0x7d,
	0xe2, 0x59, 0x59, 0x86, 0x52, 0x1b, 0xdd, 0xff, 0x16, 0x33, 0x8a, 0x47, 0x74, 0xbe, 0x9c, 0x5f,
	0x0b, 0xac, 0x3c, 0xbc, 0xb9, 0x1c, 0x66, 0xeb, 0xcb, 0xa6, 0x01, 0x98, 0xcc, 0x3d, 0x23, 0x7d,
	0x6c, 0xc9, 0x77, 0x60, 0x65, 0xd8, 0x63, 0x6e, 0xce, 0xc0, 0xeb, 0xff, 0xb6, 0x21, 0x07, 0x50,
	0x4d, 0x4b, 0xcb, 0xb2, 0xad, 0xf7, 0xb7, 0x5b, 0x92, 0x52, 0x74, 0xf5, 0x8b, 0x14, 0xed, 0x1a,
	0x80, 0x29, 0x93, 0x32, 0x16, 0x78, 0x14, 0x2a, 0x0f, 0x30, 0xa8, 0x7d, 0x16, 0x83, 0xb6, 0xa9,
	0xda, 0xd8, 0x44, 0x6a, 0x81, 0x27, 0xc2, 0xac, 0x83, 0xb5, 0x61, 0x52, 0x71, 0x11, 0xe3, 0x79,
	0x70, 0xf2, 0xed, 0xce, 0x84, 0x38, 0x1d, 0x38, 0xa0, 0x78, 0x31, 0x2a, 0xdd, 0x1b, 0xa8, 0x3f,
	0x78, 0x6f, 0x40, 0x25, 0xf2, 0x6f, 0x84, 0xcc, 0xce, 0xa2, 0xf9, 0xcb, 0x63, 0x21, 0xd3, 0x7b,
	0x6c, 0xfe, 0x2e, 0xb8, 0xce, 0xbe, 0x37, 0x70, 0xc1, 0xd5, 0xfa, 0x3a, 0xbd, 0x50, 0xf8, 0xd5,
	0x61, 0x14, 0xf0, 0xd4, 0x23, 0x0c, 0x15, 0x73, 0x5f, 0xcc, 0x6a, 0x63, 0xe9, 0xf6, 0x21, 0xcd,
	0x62, 0xe5, 0x4c, 0x03, 0x50, 0x3d, 0x7b, 0x75, 0x31, 0x9a, 0x0c, 0xdd, 0xaf, 0x3c, 0x07, 0xac,
	0xe3, 0x57, 0xf4, 0x62, 0x74, 0x31, 0x74, 0x0b, 0x9e, 0x0d, 0x95, 0xf1, 0x64, 0x34, 0xbe, 0x74,
	0x8b, 0x5e, 0x0d, 0xca, 0x97, 0xa3, 0xd3, 0xa9, 0x5b, 0x32, 0xbf, 0x4e, 0xaf, 0xce, 0xcf, 0xdd,
	0xb2, 0xb1, 0xbb, 0x9c, 0x4e, 0xce, 0x8e, 0xa7, 0xae, 0xb9, 0xdb, 0xd6, 0xc9, 0xf0, 0xf4, 0xe8,
	0xea, 0x7c, 0xea, 0x56, 0x0f, 0xff, 0x57, 0xc8, 0xc6, 0xfb, 0xbe, 0xd9, 0x36, 0x54, 0x86, 0x6f,
	0xc6, 0xd3, 0x77, 0xee, 0x57, 0xc6, 0xfe, 0xe4, 0xea, 0xcd, 0xd8, 0x2d, 0x18, 0x9b, 0xc9, 0xf0,
	0x72, 0x6a, 0x02, 0x17, 0x8d, 0xc6, 0xf1, 0xeb, 0xe1, 0xf1, 0xdf, 0xdd, 0x92, 0x57, 0x87, 0xda,
	0x78, 0x32, 0xa4, 0xa8, 0x55, 0xf6, 0x5a, 0xe0, 0x8c, 0x8f, 0x5e, 0x0d, 0xe9, 0xe5, 0x70, 0xf2,
	0x76, 0x38, 0x71, 0xcd, 0xd7, 0x55, 0xf5, 0x62, 0x34, 0x3d, 0x3b, 0x7d, 0xe7, 0x56, 0x3d, 0x17,
	0xea, 0xc7, 0xe3, 0xab, 0xb3, 0x8b, 0xd3, 0x51, 0xaa, 0x6e, 0x79, 0x6d, 0x68, 0xe4, 0x92, 0xd4,
	0x9f, 0x99, 0xeb, 0xc6, 0xe9, 0xf0, 0x68, 0x7a, 0x35, 0x19, 0x66, 0x22, 0xb3, 0x8c, 0xd6, 0xdb,
	0xe1, 0xe4, 0xf2, 0x6c, 0x74, 0xe1, 0x82, 0x89, 0xf7, 0x8f, 0xa3, 0xb3, 0x29, 0x1d, 0x9f, 0x9d,
	0xb8, 0x8e, 0xb7, 0x0b, 0xee, 0x56, 0x3c, 0x7a, 0xfc, 0xfa, 0xfc, 0xc4, 0xad, 0x7b, 0x4d, 0x80,
	0xf3, 0xa3, 0x7f, 0xbe, 0xa3, 0xe6, 0xe9, 0xd2, 0x6d, 0xfc, 0x3f, 0x00, 0x00, 0xff, 0xff, 0xed,
	0x2d, 0xef, 0x01, 0x33, 0x0a, 0x00, 0x00,
}
